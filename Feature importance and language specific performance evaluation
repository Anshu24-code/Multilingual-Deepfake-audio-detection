import numpy as np
import pandas as pd
from sklearn.inspection import permutation_importance
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import accuracy_score

# have this defined: model, X_test, y_test, lang_test, and feature_labels are already defined

class ModelWrapper:
    def __init__(self, model, lang_test):
        self.model = model
        self.lang_test = lang_test
    
    def fit(self, X, y):
        # Our model is already trained, so we do nothing here
        return self
    
    def predict(self, X):
        return self.model.predict([X, np.full(X.shape[0], self.lang_test[0])])[:, 1]
    
    def score(self, X, y):
        # Implement a scoring method using accuracy_score from sklearn
        y_pred = (self.predict(X) > 0.5).astype(int)  # Assuming binary classification
        return accuracy_score(y, y_pred)

# Create an instance of the wrapper
# Create an instance of the wrapper
model_wrapper = ModelWrapper(model, lang_test)

# Perform permutation importance
r = permutation_importance(model_wrapper, X_test, y_test,
                           n_repeats=10, random_state=42, n_jobs=-1)


# Create feature importance DataFrame
feature_importance = pd.DataFrame({
    'feature': feature_labels,
    'importance': r.importances_mean,
    'std': r.importances_std
}).sort_values('importance', ascending=False)

# Plot feature importance
plt.figure(figsize=(12, 8))
sns.barplot(x='importance', y='feature', data=feature_importance.head(20))
plt.title('Top 20 Most Important Features')
plt.tight_layout()
plt.savefig('feature_importance.png')
plt.close()

print("Top 10 Most Important Features:")
print(feature_importance.head(10))

# Language-specific analysis
languages = le_language.classes_
language_performance = {}

for lang in languages:
    lang_idx = np.where(lang_test == le_language.transform([lang])[0])[0]
    lang_y_true = y_true[lang_idx]
    lang_y_pred = y_pred_classes[lang_idx]
    lang_accuracy = np.mean(lang_y_true == lang_y_pred)
    language_performance[lang] = lang_accuracy

plt.figure(figsize=(10, 6))
sns.barplot(x=list(language_performance.keys()), y=list(language_performance.values()))
plt.title('Model Accuracy by Language')
plt.xlabel('Language')
plt.ylabel('Accuracy')
plt.savefig('language_performance.png')
plt.close()

print("Model Accuracy by Language:")
for lang, acc in language_performance.items():
    print(f"{lang}: {acc:.4f}")

# Save results to a file
with open('results_summary.txt', 'w') as f:
    f.write(f"Training accuracy: {train_accuracy * 100:.2f}%\n")
    f.write(f"Test accuracy: {test_accuracy * 100:.2f}%\n")
    f.write(f"EER: {eer:.4f}\n")
    f.write(f"DCF at EER threshold: {dcf:.4f}\n\n")
    f.write("Classification Report:\n")
    f.write(classification_report(y_true, y_pred_classes))
    f.write("\nTop 10 Most Important Features:\n")
    f.write(str(feature_importance.head(10)))
    f.write("\n\nModel Accuracy by Language:\n")
    for lang, acc in language_performance.items():
        f.write(f"{lang}: {acc:.4f}\n")

print("Results saved to 'results_summary_cnn.txt'")
print("Visualizations saved as PNG files")
